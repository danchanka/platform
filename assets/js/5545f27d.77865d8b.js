(window.webpackJsonp=window.webpackJsonp||[]).push([[232],{302:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return b}));var a=n(3),i=n(7),r=(n(0),n(747)),o={title:"ABSTRACT operator"},l={unversionedId:"ABSTRACT_operator_action_",id:"version-v4/ABSTRACT_operator_action_",isDocsHomePage:!1,title:"ABSTRACT operator",description:"The ABSTRACT operator - creating an abstract action.",source:"@site/versioned_docs/version-v4/ABSTRACT_operator_action_.md",slug:"/ABSTRACT_operator_action_",permalink:"/platform/ABSTRACT_operator_action_",editUrl:"https://github.com/danchanka/platform/edit/v4/docs/en/ABSTRACT_operator_action_.md",version:"v4",lastUpdatedAt:1618930887,formattedLastUpdatedAt:"4/20/2021",sidebar:"version-v4/learn",previous:{title:"Operator{...}",permalink:"/platform/Operator_..._"},next:{title:"ACTIVATE operator",permalink:"/platform/ACTIVATE_operator"}},p=[{value:"Syntax",id:"syntax",children:[]},{value:"Description",id:"description",children:[]},{value:"Parameters",id:"parameters",children:[]},{value:"Examples",id:"examples",children:[]}],c={toc:p};function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(r.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"ABSTRACT")," operator - creating an ",Object(r.b)("a",{parentName:"p",href:"/platform/Action_extension"},"abstract action"),". "),Object(r.b)("h3",{id:"syntax"},"Syntax"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre"},"ABSTRACT [type [exclusionType]] [FIRST | LAST] [CHECKED] (argClassName1, ..., argClassNameN) \n")),Object(r.b)("h3",{id:"description"},"Description"),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"ABSTRACT")," operator creates an abstract action, the implementation of which can be defined later (for example, in other ",Object(r.b)("a",{parentName:"p",href:"/platform/Modules"},"modules")," dependent on the module containing the ",Object(r.b)("inlineCode",{parentName:"p"},"ABSTRACT")," action). Implementations are added to the action using the ",Object(r.b)("a",{parentName:"p",href:"/platform/ACTION+_instruction"},"instruction +="),". When executing ",Object(r.b)("inlineCode",{parentName:"p"},"MULTI")," or ",Object(r.b)("inlineCode",{parentName:"p"},"CASE")," type abstract actions, their matching implementation is selected and executed. The selection of the matching implementation depends on the selection conditions that are defined when adding implementations, and on the ",Object(r.b)("inlineCode",{parentName:"p"},"ABSTRACT")," operator type."),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"CASE")," - a general case. The selection condition will be explicitly specified in the implementation using the ",Object(r.b)("a",{parentName:"li",href:"/platform/ACTION+_instruction"},Object(r.b)("inlineCode",{parentName:"a"},"WHEN")," block"),"."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"MULTI")," - ",Object(r.b)("a",{parentName:"li",href:"/platform/Branching_CASE_IF_MULTI_#poly"},"a polymorphic form"),". The selection condition is that the parameters match the implementation ",Object(r.b)("a",{parentName:"li",href:"/platform/CLASS_operator"},"signature"),". This type is the default type and need not be explicitly specified.")),Object(r.b)("p",null,"The ",Object(r.b)("a",{parentName:"p",href:"/platform/Branching_CASE_IF_MULTI_#exclusive"},"type of mutual exclusion")," of an operator determines whether several conditions for the implementation of an abstract action can simultaneously be met with a certain set of parameters. The ",Object(r.b)("inlineCode",{parentName:"p"},"EXCLUSIVE")," type indicates that implementation conditions cannot be met simultaneously. The ",Object(r.b)("inlineCode",{parentName:"p"},"OVERRIDE")," type allows several simultaneously fulfilled conditions, while which implementation is ultimately selected is determined by the keywords ",Object(r.b)("inlineCode",{parentName:"p"},"FIRST")," and ",Object(r.b)("inlineCode",{parentName:"p"},"LAST"),"."),Object(r.b)("p",null,"When performing a ",Object(r.b)("inlineCode",{parentName:"p"},"LIST")," abstract action, all implementations are executed sequentially. The implementation order is determined by the keywords ",Object(r.b)("inlineCode",{parentName:"p"},"FIRST")," and ",Object(r.b)("inlineCode",{parentName:"p"},"LAST"),"."),Object(r.b)("p",null,"The ",Object(r.b)("inlineCode",{parentName:"p"},"ABSTRACT")," operator cannot be used inside the ",Object(r.b)("a",{parentName:"p",href:"/platform/Operator_..._"},Object(r.b)("inlineCode",{parentName:"a"},"{...}")," operator"),"."),Object(r.b)("h3",{id:"parameters"},"Parameters"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"type")),Object(r.b)("p",{parentName:"li"},"  Type of abstract action. It is specified by one of these keywords:"),Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"CASE")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"MULTI")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("inlineCode",{parentName:"li"},"LIST"))),Object(r.b)("p",{parentName:"li"},"The default value is ",Object(r.b)("inlineCode",{parentName:"p"},"MULTI"),".")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"exclusionType")),Object(r.b)("p",{parentName:"li"},"  Type of mutual exclusion. One of these keywords: ",Object(r.b)("inlineCode",{parentName:"p"},"EXCLUSIVE")," or ",Object(r.b)("inlineCode",{parentName:"p"},"OVERRIDE"),". Unless explicitly specified, in a ",Object(r.b)("inlineCode",{parentName:"p"},"MULTI")," abstract action the default type of mutual exclusion is ",Object(r.b)("inlineCode",{parentName:"p"},"EXCLUSIVE"),", and in a ",Object(r.b)("inlineCode",{parentName:"p"},"CASE")," action the default type is ",Object(r.b)("inlineCode",{parentName:"p"},"OVERRIDE"),". For a ",Object(r.b)("inlineCode",{parentName:"p"},"LIST")," abstract action the type of mutual exclusion is not specified.")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"FIRST")," | ",Object(r.b)("inlineCode",{parentName:"p"},"LAST")),Object(r.b)("p",{parentName:"li"},"  Keywords. When the word ",Object(r.b)("inlineCode",{parentName:"p"},"FIRST")," is specified, implementations will be added to the top of the implementations list; when ",Object(r.b)("inlineCode",{parentName:"p"},"LAST")," is specified, implementations will be added to the end of the implementations list. Unless specified, the default is ",Object(r.b)("inlineCode",{parentName:"p"},"FIRST")," (except ",Object(r.b)("inlineCode",{parentName:"p"},"LIST"),", where the default is ",Object(r.b)("inlineCode",{parentName:"p"},"LAST"),")"),Object(r.b)("p",{parentName:"li"},"  For abstract actions such as ",Object(r.b)("inlineCode",{parentName:"p"},"CASE")," and ",Object(r.b)("inlineCode",{parentName:"p"},"MULTI")," with the type of mutual exclusion ",Object(r.b)("inlineCode",{parentName:"p"},"OVERRIDE"),", specifying ",Object(r.b)("inlineCode",{parentName:"p"},"FIRST")," will mean that of the matching implementations, the last one added will be executed. For actions such as ",Object(r.b)("inlineCode",{parentName:"p"},"LIST"),", specifying ",Object(r.b)("inlineCode",{parentName:"p"},"FIRST")," will mean that implementations will be executed in the reverse order of their addition. ")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"CHECKED")),Object(r.b)("p",{parentName:"li"},"  Keyword. If specified, the platform will automatically check that at least one implementation is defined for all descendants of the argument classes (or exactly one, if the conditions are mutually exclusive).")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},Object(r.b)("inlineCode",{parentName:"p"},"argClassName1, ..., argClassNameN")),Object(r.b)("p",{parentName:"li"},"  List of class names of property arguments. Each name is defined by a ",Object(r.b)("a",{parentName:"p",href:"/platform/IDs#classid-broken"},"class ID"),"."))),Object(r.b)("h3",{id:"examples"},"Examples"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-lsf"},"exportXls 'Export to Excel'  ABSTRACT CASE ( Order);         // In this case, ABSTRACT CASE OVERRIDE LAST is created\nexportXls (Order o) + WHEN name(currency(o)) == 'USD' THEN {\n    MESSAGE 'Export USD not implemented';\n}\n\nCLASS Task;\nrun 'Execute'  ABSTRACT ( Task);                           // ABSTRACT MULTI EXCLUSIVE\n\nCLASS Task1 : Task;\nname = DATA STRING[100] (Task);\nrun (Task1 t) + {\n    MESSAGE 'Run Task1 ' + name(t);\n}\n\n\nCLASS OrderDetail;\nprice = DATA NUMERIC[14,2] (OrderDetail);\n\nCLASS InvoiceDetail;\nprice = DATA NUMERIC[14,2] (InvoiceDetail);\nfill  ABSTRACT LIST ( OrderDetail, InvoiceDetail);   // ABSTRACT LIST LAST\n\nfill (OrderDetail od, InvoiceDetail id) + {\n    price(id) <- price(od);\n}\n")))}b.isMDXComponent=!0},747:function(e,t,n){"use strict";n.d(t,"a",(function(){return s})),n.d(t,"b",(function(){return u}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=i.a.createContext({}),b=function(e){var t=i.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=b(e.components);return i.a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},d=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),s=b(n),d=a,u=s["".concat(o,".").concat(d)]||s[d]||m[d]||r;return n?i.a.createElement(u,l(l({ref:t},c),{},{components:n})):i.a.createElement(u,l({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"}}]);