(window.webpackJsonp=window.webpackJsonp||[]).push([[336],{407:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return b})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return o})),r.d(t,"default",(function(){return p}));var n=r(3),a=r(7),l=(r(0),r(746)),b={title:"Arithmetic operators (+, -, *, ...)"},c={unversionedId:"Arithmetic_operators_+_-_..._",id:"version-v4/Arithmetic_operators_+_-_..._",isDocsHomePage:!1,title:"Arithmetic operators (+, -, *, ...)",description:"Arithmetic operators\xa0create properties whose value is the result of an arithmetic operation.\xa0The arguments of these operators must be\xa0properties whose values are instances of number classes . The platform currently supports the following arithmetic operators:",source:"@site/versioned_docs/version-v4/Arithmetic_operators_+_-_..._.md",slug:"/Arithmetic_operators_+_-_..._",permalink:"/platform/Arithmetic_operators_+_-_..._",editUrl:"https://github.com/danchanka/platform/edit/v4/docs/en/Arithmetic_operators_+_-_..._.md",version:"v4",lastUpdatedBy:"nomojenkins",lastUpdatedAt:1617800626,formattedLastUpdatedAt:"4/7/2021",sidebar:"version-v4/learn",previous:{title:"Primitive operations",permalink:"/platform/Primitive_operations"},next:{title:"Logical operators (AND, OR, NOT, XOR)",permalink:"/platform/Logical_operators_AND_OR_NOT_XOR_"}},o=[{value:"Determining the result class",id:"determining-the-result-class",children:[]},{value:"Language",id:"language",children:[]},{value:"Examples",id:"examples",children:[]}],i={toc:o};function p(e){var t=e.components,r=Object(a.a)(e,["components"]);return Object(l.b)("wrapper",Object(n.a)({},i,r,{components:t,mdxType:"MDXLayout"}),Object(l.b)("p",null,Object(l.b)("em",{parentName:"p"},"Arithmetic operators"),"\xa0create ",Object(l.b)("a",{parentName:"p",href:"/platform/Properties"},"properties")," whose value is the result of an arithmetic operation.\xa0The arguments of these operators must be\xa0properties whose values are instances of ",Object(l.b)("a",{parentName:"p",href:"/platform/Built-in_classes"},"number classes")," . The platform currently supports the following arithmetic operators:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Operator"),Object(l.b)("th",{parentName:"tr",align:null},"Name"),Object(l.b)("th",{parentName:"tr",align:null},"Description"),Object(l.b)("th",{parentName:"tr",align:null},"Example"),Object(l.b)("th",{parentName:"tr",align:null},"Result"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"+")),Object(l.b)("td",{parentName:"tr",align:null},"Summation"),Object(l.b)("td",{parentName:"tr",align:null},"Takes two input operands and returns their sum"),Object(l.b)("td",{parentName:"tr",align:null},"3 + 5"),Object(l.b)("td",{parentName:"tr",align:null},"8")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"-")),Object(l.b)("td",{parentName:"tr",align:null},"Difference"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"Accepts two input operands and returns their difference"),Object(l.b)("br",null),Object(l.b)("p",null,"This operator also has a unary form, in which case the first operand is considered equal to 0")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"5 - 3"),Object(l.b)("br",null),Object(l.b)("p",null,"-3")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"2"),Object(l.b)("br",null),Object(l.b)("p",null,"-3"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"*")),Object(l.b)("td",{parentName:"tr",align:null},"Multiplication"),Object(l.b)("td",{parentName:"tr",align:null},"Accepts two input operands and returns their product"),Object(l.b)("td",{parentName:"tr",align:null},"3 * 5"),Object(l.b)("td",{parentName:"tr",align:null},"15")),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"/")),Object(l.b)("td",{parentName:"tr",align:null},"Ratio"),Object(l.b)("td",{parentName:"tr",align:null},"Takes two input operands and returns their ratio"),Object(l.b)("td",{parentName:"tr",align:null},"15 / 3"),Object(l.b)("td",{parentName:"tr",align:null},"5")))),Object(l.b)("p",null,"All of these operators return ",Object(l.b)("strong",{parentName:"p"},"NULL")," if one of the operands is ",Object(l.b)("strong",{parentName:"p"},"NULL")," . It is also possible to use a special form of summation and difference operators with\xa0brackets, in which case ",Object(l.b)("strong",{parentName:"p"},"NULL")," will be equivalent to 0. The reverse is also true for these type of operators: if the result of an operator in such form is 0, then ",Object(l.b)("strong",{parentName:"p"},"NULL is returned")," (e. g., 5 (-) 5 = ",Object(l.b)("strong",{parentName:"p"},"NULL"),"):"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},Object(l.b)("strong",null,"Operator")),Object(l.b)("th",{parentName:"tr",align:null},Object(l.b)("strong",null,"Name")),Object(l.b)("th",{parentName:"tr",align:null},Object(l.b)("strong",null,"Description")),Object(l.b)("th",{parentName:"tr",align:null},Object(l.b)("strong",null,"Example")),Object(l.b)("th",{parentName:"tr",align:null},Object(l.b)("strong",null,"Result")))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"(+)")),Object(l.b)("td",{parentName:"tr",align:null},"Summation"),Object(l.b)("td",{parentName:"tr",align:null},"Takes two input operands and returns their sum, treating ",Object(l.b)("strong",null,"NULL")," as 0"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"3 (+) 5"),Object(l.b)("br",null),Object(l.b)("p",null,"3 (+) ",Object(l.b)("strong",null,"NULL"))),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"8"),Object(l.b)("br",null),Object(l.b)("p",null,"3"))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"(-)")),Object(l.b)("td",{parentName:"tr",align:null},"Difference"),Object(l.b)("td",{parentName:"tr",align:null},"Takes two input operands and returns their difference, treating ",Object(l.b)("strong",null,"NULL")," as 0"),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"5 (-) 3"),Object(l.b)("br",null),Object(l.b)("p",null,"5 (-) ",Object(l.b)("strong",null,"NULL")),Object(l.b)("br",null),Object(l.b)("p",null,"5 (-) 5")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("p",null,"2"),Object(l.b)("br",null),Object(l.b)("p",null,"5"),Object(l.b)("br",null),Object(l.b)("p",null,Object(l.b)("strong",null,"NULL")))))),Object(l.b)("h3",{id:"determining-the-result-class"},"Determining the result class"),Object(l.b)("p",null,"The result class is determined as:"),Object(l.b)("table",null,Object(l.b)("thead",{parentName:"table"},Object(l.b)("tr",{parentName:"thead"},Object(l.b)("th",{parentName:"tr",align:null},"Operator"),Object(l.b)("th",{parentName:"tr",align:null},"Result"))),Object(l.b)("tbody",{parentName:"table"},Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"+"),", ",Object(l.b)("strong",null,"-")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("a",{parentName:"td",href:"/platform/Built-in_classes#commonparentclass"},"Common ancestor"),' ("Numbers" family)')),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"*")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("pre",null,Object(l.b)("code",null,"NUMERIC","[p1.IntegerPart + p1.Precision + p2.IntegerPart + p2.Precision, p1.Precision + p2.Precision]")))),Object(l.b)("tr",{parentName:"tbody"},Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("strong",null,"/")),Object(l.b)("td",{parentName:"tr",align:null},Object(l.b)("pre",null,Object(l.b)("code",null,"NUMERIC","[p1.IntegerPart + p1.Precision + p2.IntegerPart + p2.Precision, p1.Precision + p2.IntegerPart]")))))),Object(l.b)("h3",{id:"language"},"Language"),Object(l.b)("p",null,"Description ",Object(l.b)("a",{parentName:"p",href:"/platform/Arithmetic_operators"},"of arithmetic operators"),"."),Object(l.b)("h3",{id:"examples"},"Examples"),Object(l.b)("pre",null,Object(l.b)("code",{parentName:"pre",className:"language-lsf"},"sum(a, b) = a + b;\ntransform(a, b, c) = -a * (b (+) c);\n")))}p.isMDXComponent=!0},746:function(e,t,r){"use strict";r.d(t,"a",(function(){return s})),r.d(t,"b",(function(){return O}));var n=r(0),a=r.n(n);function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function b(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?b(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):b(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},l=Object.keys(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)r=l[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var i=a.a.createContext({}),p=function(e){var t=a.a.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},s=function(e){var t=p(e.components);return a.a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,l=e.originalType,b=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),s=p(r),m=n,O=s["".concat(b,".").concat(m)]||s[m]||u[m]||l;return r?a.a.createElement(O,c(c({ref:t},i),{},{components:r})):a.a.createElement(O,c({ref:t},i))}));function O(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var l=r.length,b=new Array(l);b[0]=m;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:n,b[1]=c;for(var i=2;i<l;i++)b[i]=r[i];return a.a.createElement.apply(null,b)}return a.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);